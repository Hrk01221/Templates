<snippet>
	<content><![CDATA[
template<class T=int>
    class SegmentTree{
        public:
            vector<T> v,tree,lazy;
            int size;
            SegmentTree(vector<T>&v){
                this->v = v;
                size = v.size();
                tree.resize(4*size,0);
                lazy.resize(4*size,0);
            }
            T Merge(T a,T b){

                return a+b;
            }
            void debug(bool f){ 
                if(f){for(auto it : tree)cout << it << " ";cout << endl;}
                else {for(auto it : v)cout << it << " ";cout << endl;}
            }
            void build(){
                _build(1,1,size-1);
            }
            void update(int L,int R,int val){
                _update(1,1,size-1,L,R,val);
            }
            T query(int L,int R){
                return _query(1,1,size-1,L,R);
            }
            void _build(int i,int l,int r){
                if(l==r){
                    tree[i] = v[l];
                    return;
                }
                int mid = (l+r)>>1;
                _build(2*i,l,mid);
                _build(2*i+1,mid+1,r);
                tree[i]=Merge(tree[2*i],tree[2*i+1]);
            }
            void _update(int i,int l,int r,int L,int R,int val){
                
                if(lazy[i]!=0){

                    tree[i] += (r-l+1) * lazy[i];

                    if(l!=r){

                        lazy[2*i]+=lazy[i];
                        lazy[2*i+1]+=lazy[i];
                    }

                    lazy[i] = 0;
                }

                if(R<l or L>r or l>r)return;

                if(L<=l and R>=r){

                    tree[i] += (r-l+1)*val;

                    if(l!=r){

                        lazy[2*i]+=val;
                        lazy[2*i+1]+=val;
                    }

                    return;
                }
                int mid = (l+r)>>1;

                _update(2*i,l,mid,L,R,val);
                _update(2*i+1,mid+1,r,L,R,val);
                tree[i]=Merge(tree[2*i],tree[2*i+1]);
            }
            T _query(int i,int l,int r,int L,int R){
                if(lazy[i]!=0){

                    tree[i] += (r-l+1) * lazy[i];

                    if(l!=r){

                        lazy[2*i]+=lazy[i];
                        lazy[2*i+1]+=lazy[i];
                    }

                    lazy[i] = 0;
                }
                if(R<l or L>r)return 0;
                if(L<=l and R>=r)return tree[i];
                int mid = (l+r)>>1;
                return Merge(_query(2*i,l,mid,L,R),_query(2*i+1,mid+1,r,L,R));
            }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lazyseg</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
